#!/bin/sh

# Alias
alias rm="trash" \
    dmenu_run="/usr/local/bin/dmenu_run -p 'Command >'" \
    v="$EDITOR" \
    cat="highlight --force --out-format=ansi" \
    ccat="/bin/cat" \
    ls="gls -hNF --color=auto --group-directories-first" \
    grep="grep --color=auto" \
    mail="mail && trash ~/mbox" \
    diff="colordiff" \
    fzfp="fzf --preview 'highlight --force --out-format=ansi {}'" \
    clock="tty-clock -c" \
    youtube="youtube-dl --add-metadata -i -o '%(upload_date)s-%(title)s.%(ext)s'" \
    download="cd ~/Downloads && aria2c" \
    repr="source ~/.profile && cd -" \
    cmusd="tmux new-session -A -D -s cmus '$(which cmus)'" \
    trem="transmission-remote-cli" \
    lock="/System/Library/CoreServices/ScreenSaverEngine.app/Contents/MacOS/ScreenSaverEngine" \
    python="python3" \
    pip="pip3" \
    musicphp="/Users/frank/.config/composer/vendor/bin/music-php" \
    hw="task list project:School" \
    dotfiles="/usr/bin/git --git-dir=$HOME/.config/dotfiles/ --work-tree=$HOME" \
    cpr="compiler" \
    r="/usr/local/bin/r" \
    bookmarks="buku --colors oKlxm -p | less" \
    ycom="unlink conan_ycm_flags.json && rm .ycm_extra_conf.py && cp build/conan_ycm_extra_conf.py .ycm_extra_conf.py && ln -s build/conan_ycm_flags.json conan_ycm_flags.json" \
    sf="surfraw google" \
    newsboat="newsboat -q" \
    suckclean="make clean && rm config.h && git reset --hard origin/master" \

# Clean up and conf
alias w3m="w3m -config $HOME/.config/w3m/config -bookmark $HOME/.config/w3m/bookmark.html && trash -rf ~/.w3m" \
    tmux="tmux -f ~/.config/tmux/tmux.conf" \
    bash="bash --init-file $HOME/.config/bash/bashrc" \
    calcurse="calcurse -C ~/.config/calcurse -D ~/.local/share/calcurse" \
    abook="abook -C ~/.config/abook/abookrc --datafile ~/.config/abook/addressbook" \
    mpd="mpd ~/.config/mpd/mpd.conf" \
    mbsync="mbsync -c $XDG_CONFIG_HOME/isync/mbsyncrc" \
    gpg="gpg --homedir $XDG_DATA_HOME/gnupg" \
    skhd="skhd -c ~/.config/skhd/skhdrc" \
    zathura="~/.local/bin/tools/zathura" \
    ranlor="wal --theme random && xrdb -merge ~/.Xresources" \

fvim() {
    $EDITOR "$(fzfp -m --prompt='File> ')"
}
fzat() {
    dothura "$(du -a . | awk '{$1 = ""; print $0}' | sed 's/^ //g' | grep ".pdf$" | fzfp -m --prompt='PDF> ')" 2> /dev/null
}
fimg() {
    sxiv -qb "$(du -a . | awk '{$1 = ""; print $0}' | sed 's/^ //g' | awk '/jpeg/ || /png/ || /jpg/ || /gif/' | fzfp -m --prompt='Image> ')"
}
fconfig() {
    $EDITOR "$(fd -H . ~/.config ~/.local/bin -d 3 --type f | fzfp --prompt='Config> ')"
}
fbrew() {
    inst="$(brew search | fzf -m --prompt='Package> ' --preview 'brew info {}')"
    if [ "$inst" ]; then
        for prog in $inst;
        do brew install "$prog"; done;
    fi
}
fman() {
    man "$(man -k . | fzf --prompt='Man> ' | sed 's/(/ /g' | awk '{print $1}')"
}
ftldr() {
    tldr "$(tldr --list | sed "s/ //g" | tr "," "\n" | fzf --prompt='Tldr> ' --preview 'tldr {}')"
}
fpass() {
    lpass show -c --password $(lpass ls  | fzf -m --prompt='Account> ' | awk '{print $(NF)}' | sed 's/\]//g')
}
lfcd() {
    tmp="$(mktemp)"
    lf -last-dir-path="$tmp" "$@"
    if [ -f "$tmp" ]; then
        dir="$(cat "$tmp")"
        rm -f "$tmp"
        [ -d "$dir" ] && [ "$dir" != "$(pwd)" ] && cd "$dir"
    fi
}
